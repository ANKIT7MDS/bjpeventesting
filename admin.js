// ===============================
// Admin Panel (Visitors + Events + Analytics)
// - Visitors list (unchanged base)
// - Event management (dropdown + set active + clear)
// - Filters: date/reason/mandal + VisitorType + EventFilter
// - Analytics: per-person counts, busiest office days, event-wise counts, selected event details
// ===============================

const firebaseConfig = {
  apiKey: "AIzaSyD-xaGtrczkUCT7rwEOuRnHzVE9AohYsKU",
  authDomain: "bjplivefirebase.firebaseapp.com",
  projectId: "bjplivefirebase"
};
if (!firebase.apps?.length) firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

document.addEventListener("DOMContentLoaded", () => {
  const tb = document.querySelector("#dataTable tbody");
  const emptyState = document.getElementById("emptyState");

  const fromDate = document.getElementById("fromDate");
  const toDate   = document.getElementById("toDate");
  const reasonSelect = document.getElementById("reasonSelect");
  const mandalSelect = document.getElementById("mandalSelect");
  const searchInput  = document.getElementById("searchInput");
  const exportBtn    = document.getElementById("exportBtn");
  const clearBtn     = document.getElementById("clearBtn");

  // NEW: Visitor type + event filter
  const visitorType  = document.getElementById("visitorType");   // all | office | event
  const eventFilter  = document.getElementById("eventFilter");   // event name

  // NEW: Event management controls
  const eventNameInput   = document.getElementById("eventNameInput");
  const addEventBtn      = document.getElementById("addEventBtn");
  const eventActiveSelect= document.getElementById("eventActiveSelect");
  const setActiveBtn     = document.getElementById("setActiveBtn");
  const endEventBtn      = document.getElementById("endEventBtn");
  const activeEventLabel = document.getElementById("activeEventLabel");

  let allRows = [];      // visitors ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§°‡•á‡§ü‡§æ
  let viewRows = [];     // ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§¶
  let EVENTS = [];       // {id,name,active}
  let EVENT_SET = new Set(); // ‡§ñ‡•ã‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è

  // ‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü (‡§Ü‡§™‡§ï‡•á ‡§´‡•â‡§∞‡•ç‡§Æ ‡§ï‡•Ä ‡§§‡§∞‡§π)
  const REASONS = [
    "‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø ‡§™‡§∞ ‡§¨‡•à‡§†‡§ï",
    "‡§ú‡§ø‡§≤‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§ï‡•ç‡§∑ ‡§∏‡•á ‡§≠‡•á‡§Ç‡§ü",
    "Ìä∏‡§æ‡§Ç‡§∏‡§´‡§∞ / ‡§∂‡§æ‡§∏‡§ï‡•Ä‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§Ø / ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§".replace("Ìä∏","‡§ü"),
    "‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø ‡§™‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
    "‡§Ö‡§®‡•ç‡§Ø ‡§ï‡•ã‡§à ‡§ï‡§æ‡§∞‡•ç‡§Ø"
  ];
  const MANDALS = [
    "‡§≠‡•á‡§Ç‡§∏‡•ã‡§¶‡§æ","‡§≠‡§æ‡§®‡§™‡•Å‡§∞‡§æ","‡§ó‡§∞‡•ã‡§†","‡§Æ‡•á‡§≤‡§ñ‡•á‡§°‡§æ","‡§ñ‡•ú‡§æ‡§µ‡§¶‡§æ","‡§∂‡§æ‡§Æ‡§ó‡•ù","‡§∏‡•Å‡§µ‡§æ‡§∏‡§∞‡§æ","‡§¨‡§∏‡§æ‡§à",
    "‡§∏‡•Ä‡§§‡§æ‡§Æ‡§ä","‡§ï‡•ç‡§Ø‡§æ‡§Æ‡§™‡•Å‡§∞","‡§∏‡•Ä‡§§‡§æ‡§Æ‡§ä ‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£","‡§ó‡•Å‡§∞‡•ç‡§ú‡§∞ ‡§¨‡§∞‡§°‡§ø‡§Ø‡§æ","‡§ß‡•Å‡§Ç‡§¶‡§ß‡•ú‡§ï‡§æ","‡§¨‡•Å‡§¢‡§æ",
    "‡§™‡§ø‡§™‡§≤‡§ø‡§Ø‡§æ ‡§Æ‡§Ç‡§°‡•Ä","‡§Æ‡§≤‡•ç‡§π‡§æ‡§∞‡§ó‡•ù","‡§¶‡§≤‡•ã‡§¶‡§æ","‡§Æ‡§ó‡§∞‡§æ‡§Æ‡§æ‡§§‡§æ ‡§ú‡•Ä","‡§Æ‡§Ç‡§¶‡§∏‡•å‡§∞ ‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£",
    "‡§Æ‡§Ç‡§¶‡§∏‡•å‡§∞ ‡§â‡§§‡•ç‡§§‡§∞","‡§Æ‡§Ç‡§¶‡§∏‡•å‡§∞ ‡§¶‡§ï‡•ç‡§∑‡§ø‡§£","‡§Ö‡§®‡•ç‡§Ø ‡§ú‡§ø‡§≤‡•á ‡§∏‡•á ‡§Ü‡§Ø‡•á"
  ];

  // Dropdowns ‡§≠‡§∞‡•á‡§Ç (once)
  REASONS.forEach(r => {
    const op = document.createElement("option");
    op.value = r; op.textContent = r;
    reasonSelect.appendChild(op);
  });
  MANDALS.forEach(m => {
    const op = document.createElement("option");
    op.value = m; op.textContent = m;
    mandalSelect.appendChild(op);
  });

  // üîÅ Realtime: visitors (latest first)
  db.collection("visitors")
    .orderBy("timestamp", "desc")
    .limit(2000)
    .onSnapshot((snap) => {
      allRows = snap.docs.map(d => ({ id: d.id, ...d.data() }));
      applyFilter();
    }, (err) => {
      console.error("Firestore listeners error:", err);
      tb.innerHTML = `<tr><td colspan="9">‚ùå ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ</td></tr>`;
    });

  // üîÅ Realtime: events (for management + filters)
  db.collection("events").orderBy("name").onSnapshot((snap) => {
    EVENTS = snap.docs.map(d => ({ id: d.id, ...d.data() }));
    EVENT_SET = new Set(EVENTS.map(e => (e.name || "").toString().trim()));
    fillEventDropdowns();
    updateActiveEventLabel();
    applyFilter(); // ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø event-set ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
  });

  function fillEventDropdowns(){
    // Active-set dropdown (management)
    if (eventActiveSelect) {
      eventActiveSelect.innerHTML = "";
      EVENTS.forEach(ev => {
        const op = document.cr
